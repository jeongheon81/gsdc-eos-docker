---
- block:
  - set_fact:
      eos_container_groups: "{{ containers|to_json|from_json|json_query('keys(@)|[?starts_with(@,`eos_`)]') }}"

  - set_fact:
      eos_containers_with_logs: >-
        {% for container in containers[item] -%}
        {%   if container.logs is not defined -%}
        {%     set container = container|combine({ 'logs': eos_log_files_default[item] }) -%}
        {%     set dummy = containers[item].__setitem__(loop.index0, container) -%}
        {%   endif -%}
        {% endfor -%}
        {{ eos_containers_with_logs|default({})|combine({ item: containers[item]}, recursive=True) }}
    loop: "{{ eos_container_groups }}"

  - set_fact:
      #eos_container_list: "{{ containers|to_json|from_json|json_query('['+ eos_container_groups|join(',') +'][]|[].{ name: name, logs: logs }') }}"
      eos_container_list: "{{ eos_containers_with_logs|dict2items|subelements('value')|to_json|from_json|json_query('[?starts_with(@[0].key,`eos_`)].{ type: [0].key, name: [1].name, logs: [1].logs }') }}"

  - name: Install required packages.
    package:
      name:
      - cronie
      - cronie-anacron
      - crontabs
      - logrotate
      state: latest
    register: install_packages
    until: install_packages is success
    retries: 5
    delay: 3

  - name: Get log volume information
    docker_volume_info:
      name: "{{ eos_container.name }}_log"
    register: log_volume_info_results
    loop: "{{ eos_container_list }}"
    loop_control:
      loop_var: eos_container

  - name: Set logrotate config
    template: src=logrotate-eos-logs.j2 dest=/etc/logrotate.d/{{ log_volume_info.volume.Name }}s owner=root group=root mode=0644
    when: log_volume_info.exists
    loop: "{{ log_volume_info_results.results }}"
    loop_control:
      loop_var: log_volume_info

  - name: Set cron log housekeeping
    template: src=cron-eos-logs.j2 dest=/etc/cron.d/{{ log_volume_info.volume.Name }}s owner=root group=root mode=0644
    when: log_volume_info.exists
    loop: "{{ log_volume_info_results.results }}"
    loop_control:
      loop_var: log_volume_info

  - block:
    - set_fact:
        eos_mgm_container_list: "{{ eos_containers_with_logs|json_query('eos_mgm[].name') }}"

    - name: Get eos volume information
      docker_volume_info:
        name: "{{ item }}_eos"
      register: eos_mgm_volume_info_results
      loop: "{{ eos_mgm_container_list }}"

    - name: Set cron report housekeeping
      template: src=cron-eos-reports.j2 dest=/etc/cron.d/{{ eos_mgm_volume_info.volume.Name }}-reports owner=root group=root mode=0644
      when: eos_mgm_volume_info.exists
      loop: "{{ eos_mgm_volume_info_results.results }}"
      loop_control:
        loop_var: eos_mgm_volume_info
    
    when: containers.eos_mgm is defined

  - set_fact:
      log_volumes: "{{ log_volumes|default([]) +
        [{
          'name': log_volume_info.volume.Name,
          'mountpoint': log_volume_info.volume.Mountpoint,
          'logs': eos_container_list[ansible_loop.index0].logs,
          'job_prefix': eos_container_list[ansible_loop.index0].name,
          'service': 'eos-'+eos_container_list[ansible_loop.index0].type[4:],
          'pipeline_stages': eos_grafana_promtail_pipeline_stages[eos_container_list[ansible_loop.index0].type]|default([])
        }] }}"
    loop: "{{ log_volume_info_results.results }}"
    loop_control:
      extended: yes
      loop_var: log_volume_info

  when: containers is defined
