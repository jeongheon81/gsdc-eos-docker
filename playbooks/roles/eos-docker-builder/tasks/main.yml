---
- set_fact:
    eos_container_image_builder: "{{ hostvars | dict2items | json_query('[?type(value.containers)==`object`].key|[0]') }}"
    eos_container_build_home: "{{ install_info_home }}/eos-docker-build"

- block:
  - name: Install gzip
    package: name=gzip state=installed
    register: install_packages
    until: install_packages is success
    retries: 5
    delay: 3

  - name: Create EOS container build home directory if it does not exist
    file:
      path: "{{ eos_container_build_home }}"
      state: directory
      mode: '0755'

  - name: Copy eos container build files
    copy: src={{ item.src }} dest={{ item.dest }}
    loop:
    - { src: "Dockerfile", dest: "{{ eos_container_build_home }}/Dockerfile" }
    - { src: "repos", dest: "{{ eos_container_build_home }}" }
    - { src: "configs", dest: "{{ eos_container_build_home }}" }
    - { src: "image_scripts", dest: "{{ eos_container_build_home }}" }
    - { src: "dictionary", dest: "{{ eos_container_build_home }}" }

  - name: Changing permissions of "image_scripts/*", adding "+x"
    file: dest={{ eos_container_build_home }}/image_scripts mode=a+x recurse=yes

  when: containers is defined

- name: Check eos container image on build host
  docker_image_info:
    name:  "{{ eos_container_image_name }}:{{ eos_container_image_tag }}"
  register: eos_docker_image_info
  run_once: true
  delegate_to: "{{ eos_container_image_builder }}"
  when: containers is defined

- block:
  - name: Build eos container image
    docker_image:
      name: "{{ eos_container_image_name }}"
      tag: "{{ eos_container_image_tag|string }}"
      build:
        path: "{{ eos_container_build_home }}"
        pull: no
        network: host
      source: build
    async: 2592000
    poll: 0
    register: eos_docker_image_builder

  - name: 'eos-docker-builder : Watch eos-docker-build job until finishes'
    include_role:
      name: async_job_watcher
    vars:
      watch_title: docker image build task
      watch_become: yes
      watch_command: !unsafe "df /var/lib/docker; docker image ls --all | head -n 3"
      watch_file: stdout
      watch_lines_reset: yes
      watch_job: eos_docker_image_builder
      watch_timeout: 259200
      watch_poll: 10

  run_once: true
  delegate_to: "{{ eos_container_image_builder }}"
  when: containers is defined and eos_docker_image_info.images|length == 0

- name: Check fetched eos container image
  become: no
  stat: "path=tmp/{{ eos_container_image_archive }}"
  register: check_local_image_archive_stat_result
  changed_when: check_local_image_archive_stat_result.stat.exists == False or eos_docker_image_info.images|length == 0
  run_once: true
  delegate_to: localhost
  when: containers is defined

- block:
  - name: Check saved eos container image
    stat: "path={{ eos_container_build_home }}"
    register: check_remote_image_archive_stat_result
    changed_when: check_remote_image_archive_stat_result.stat.exists == False or eos_docker_image_info.images|length == 0

  - name: Save eos container image
    shell: "docker save {{ eos_container_image_name }}:{{ eos_container_image_tag }} | gzip > {{ eos_container_build_home }}/{{ eos_container_image_archive }}"
    when: check_remote_image_archive_stat_result.stat.exists == False or eos_docker_image_info.images|length == 0

  - name: Fetch eos container image
    fetch:
      src: "{{ eos_container_build_home }}/{{ eos_container_image_archive }}"
      dest: "tmp/{{ eos_container_image_archive }}"
      flat: yes

  run_once: true
  delegate_to: "{{ eos_container_image_builder }}"
  when: containers is defined and (check_local_image_archive_stat_result.stat.exists == False or eos_docker_image_info.images|length == 0)

- name: Check eos container image on all host
  docker_image_info:
    name:  "{{ eos_container_image_name }}:{{ eos_container_image_tag }}"
  register: eos_docker_image_info
  when: containers is defined

- block:
  - name: copy eos container image
    copy: src=tmp/{{ eos_container_image_archive }} dest={{ eos_container_build_home }}/{{ eos_container_image_archive }}

  - name: load eos container image
    shell: "gunzip --stdout {{ eos_container_build_home }}/{{ eos_container_image_archive }} | docker load"

  when: containers is defined and eos_docker_image_info.images|length == 0

- name: Check eos container image on all host for verify
  docker_image_info:
    name:  "{{ eos_container_image_name }}:{{ eos_container_image_tag }}"
  register: eos_docker_image_info
  when: containers is defined

- set_fact:
    number_of_eos_container_image_info: "{{ hostvars | dict2items | json_query('[?type(value.eos_docker_image_info.images)==`array`].value.eos_docker_image_info.images[].RootFS') | unique | length }}"

- name: Check identical image
  assert:
    that: number_of_eos_container_image_info|int <= 1
  run_once: true
