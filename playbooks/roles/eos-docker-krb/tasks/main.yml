---
- name: Setup firewall
  firewalld:
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
    zone: internal
  loop:
  - 88/tcp
  - 88/udp
  - 750/udp
  - 750/tcp
  when: containers.eos_krb|json_query('[?network_mode]|[].network_mode|[0]') == 'host'
  notify:
  - reload firewalld
- meta: flush_handlers

- block:
  - name: Setup container
    include_tasks: tasks/eos_container_setup.yml
    vars:
      components: "{{ containers.eos_krb }}"
      config_base_directory: "{{ eos_krb_config_base_directory }}"
      shipped_files: "{{ eos_krb_shipped_files }}"
      generated_files: "{{ eos_krb_generated_files }}"
      template_files: "{{ eos_krb_template_files }}"
      config_files: "{{ eos_krb_config_files }}"
      config_directories: "{{ eos_krb_config_directories }}"
      persistent_volumes: "{{ eos_krb_persistent_volumes }}"
      privileged_container: false
      entrypoint: [ "/usr/local/bin/kdc-docker-entrypoint.sh" ]
      command: []
      healthcheck:
        test: ["CMD", "/bin/sh", "-c", "/usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} check || exit 1"]
        interval: 30s
        timeout: 20s
        retries: 3

  - set_fact:
      restart_notifies: >-
        {% set result = [] -%}
        {% for item in create_template_file_results.results -%}
        {%   if item.changed and item.item[0].is_initialized -%}
        {{     result.append( item.item[0].name ) -}}
        {%   endif -%}
        {% endfor -%}
        {{ result|unique }}

  - name: Restart by config files
    shell: docker restart {{ item }}
    loop: "{{ restart_notifies|default([]) }}"

  - name: Init the kdc store
    shell: |
      docker exec -it {{ item.name }} bash -c '
        if ! /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} check &>/dev/null ; then
          /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} init --realm-max-ticket-life=unlimited --realm-max-renewable-life=unlimited {{ eos_realm }} &&
          echo changed;
        else
          echo skipped;
        fi
      '
    args:
      executable: /bin/bash
    register: command_result
    changed_when: command_result.stdout_lines|length > 0 and command_result.stdout_lines[-1] == 'changed'
    loop: "{{ container_infos }}"

  - name: Generate eos_admin_user keytab files
    shell: |
      docker exec -it {{ containers.eos_krb[0].name }} bash -c '
        if ! /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} get {{ eos_admin_user }} &>/dev/null ; then
          /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} add --random-password --use-defaults {{ eos_admin_user }} | /usr/bin/tee -a /root/user.{{ eos_admin_user }}.log &&
          /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} ext_keytab --keytab=/root/user.{{ eos_admin_user }}.keytab {{ eos_admin_user }} &&
          echo changed;
        elif [ ! -e /root/user.{{ eos_admin_user }}.keytab ] ; then
          /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} ext_keytab --keytab=/root/user.{{ eos_admin_user }}.keytab {{ eos_admin_user }} &&
          echo changed;
        else
          echo skipped;
        fi
      '
    args:
      executable: /bin/bash
      # creates:
    register: command_result
    changed_when: command_result.stdout_lines|length > 0 and command_result.stdout_lines[-1] == 'changed'
    run_once: true

  - name: Generate eos_mgm_nodes keytab files
    shell: |
      {% set krb_filename = item[0] -%}
      {% set krb_hostname = "" -%}
      {% if item[0] == item[1] -%}
      {%   set krb_hostname = item[0] -%}
      {% else -%}
      {%   set krb_hostname = container_name_host_map[item[0]] -%}
      {% endif -%}
      docker exec -it {{ containers.eos_krb[0].name }} bash -c '
        if ! /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} get host/{{ krb_hostname }} &>/dev/null ; then
          /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} add --random-password --use-defaults host/{{ krb_hostname }} | /usr/bin/tee -a /root/host.{{ krb_filename }}.log &&
          /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} ext_keytab --keytab=/root/host.{{ krb_filename }}.keytab host/{{ krb_hostname }} &&
          echo changed;
        elif [ ! -e /root/host.{{ krb_filename }}.keytab ] ; then
          /usr/lib/heimdal/bin/kadmin -l -r {{ eos_realm }} ext_keytab --keytab=/root/host.{{ krb_filename }}.keytab host/{{ krb_hostname }} &&
          echo changed;
        else
          echo skipped;
        fi
      '
    args:
      executable: /bin/bash
      # creates:
    register: command_result
    changed_when: command_result.stdout_lines|length > 0 and command_result.stdout_lines[-1] == 'changed'
    loop: "{{ eos_mgm_names|zip(eos_mgm_nodes)|list }}"
    run_once: true

  - name: Generate eos keytab files
    shell: |
      docker exec -it {{ containers.eos_krb[0].name }} bash -c '
        if [ ! -e /root/eos.keytab ] ; then
          yes | xrdsssadmin -k eos+ -u daemon -g daemon add /root/eos.keytab | /usr/bin/tee -a /root/eos.keytab.log &&
          chown daemon:daemon /root/eos.keytab &&
          echo changed;
        else
          echo skipped;
        fi
      '
    args:
      executable: /bin/bash
      # creates:
    register: command_result
    changed_when: command_result.stdout_lines|length > 0 and command_result.stdout_lines[-1] == 'changed'
    run_once: true

  # - name: Wait keytab generation
  #   shell: |
  #     count=0
  #     success=0
  #     while [ $count -lt 5 ]; do
  #       sleep 1
  #       if docker logs {{ item.name }} 2>&1 | grep --color=never -Pzo '(?s)Populating kdc.*Done.' ; then
  #         success=1
  #         break;
  #       fi
  #       count=$(( $count + 1 ));
  #     done
  #     if [ $success -ne 1 ]; then
  #       >&2 echo FAILED
  #     fi
  #   register: wait_keytab
  #   until: wait_keytab is success
  #   retries: 5
  #   delay: 3
  #   changed_when: false
  #   failed_when: "'FAILED' in wait_keytab.stderr"
  #   loop: "{{ container_infos }}"

  - name: Copy keytab files
    shell: |
      if ! {{ item[0].is_initialized|string|lower }} || [ ! -e /etc/eos-docker/{{ item[0].name }}/{{ item[1] }}.keytab ] ; then
        docker cp {{ item[0].name }}:/root/{{ item[1] }}.keytab /etc/eos-docker/{{ item[0].name }}/{{ item[1] }}.keytab &&
        echo changed;
      else
        echo skipped;
      fi
    args:
      executable: /bin/bash
    register: command_result
    changed_when: command_result.stdout_lines|length > 0 and command_result.stdout_lines[-1] == 'changed'
    loop: "{{ container_infos|product( ['host']|product(eos_mgm_names)|map('join', '.')|list + [ 'user.'+eos_admin_user, 'eos' ] )|list }}"

  - name: Create keytab files directory
    become: no
    file:
      path: "{{ playbook_dir }}/tmp/keytab/{{ item[0].krb_realm }}/{{ item[1] }}/"
      state: directory
      mode: u=rwX,g=rX,o=rX
    loop: "{{ container_infos|product(eos_node_names)|list }}"
    delegate_to: 127.0.0.1

  - set_fact:
      eos_mgm_nodes_and_names: "{{ eos_mgm_nodes_and_names|default([]) + [dict(node=item[0], name=item[1])] }}"
    loop: "{{ eos_mgm_nodes|zip(eos_mgm_names)|list }}"

  - name: Fetch mgm server keytab files
    fetch:
      src: "/etc/eos-docker/{{ item[0].name }}/host.{{ item[1] }}.keytab"
      dest: "tmp/keytab/{{ item[0].krb_realm }}/{{ item[1] }}/eos.krb5.keytab"
      flat: yes
    loop: "{{ container_infos|product(eos_mgm_names)|list }}"

  - name: Fetch user keytab files
    fetch:
      src: "/etc/eos-docker/{{ item[0].name }}/user.{{ eos_admin_user }}.keytab"
      dest: "tmp/keytab/{{ item[0].krb_realm }}/{{ item[1] }}/{{ eos_admin_user }}.keytab"
      flat: yes
    loop: "{{ container_infos|product(eos_manager_names)|list }}"

  - name: Fetch eos keytab files
    fetch:
      src: "/etc/eos-docker/{{ item[0].name }}/eos.keytab"
      dest: "tmp/keytab/{{ item[0].krb_realm }}/{{ item[1] }}/eos.keytab"
      flat: yes
    loop: "{{ container_infos|product(eos_node_names)|list }}"

  when: containers is defined and containers.eos_krb is defined

- meta: flush_handlers
