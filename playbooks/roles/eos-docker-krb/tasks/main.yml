---
- block:
  # - set_fact:
  #     eos_components: "{{ containers.eos_krb }}"

  - name: Setup container
    include_tasks: tasks/eos_container_setup.yml
    vars:
      components: "{{ containers.eos_krb }}"
      config_base_directory: "{{ eos_krb_config_base_directory }}"
      shipped_files: "{{ eos_krb_shipped_files }}"
      generated_files: "{{ eos_krb_generated_files }}"
      template_files: "{{ eos_krb_template_files }}"
      config_files: "{{ eos_krb_config_files }}"
      config_directories: "{{ eos_krb_config_directories }}"
      persistent_volumes: "{{ eos_krb_persistent_volumes }}"
      privileged_container: false
      entrypoint: "/kdc.sh"
      command: ""

  # - name: Start service
  #   shell: docker exec -i {{ item.item.name }} /kdc.sh
  #   when: item.changed
  #   loop: "{{ container_start_results.results }}"

  - name: Wait keytab generation
    shell: |
      count=0
      success=0
      while [ $count -lt 5 ]; do
        sleep 1
        if docker logs {{ item.name }} 2>&1 | grep --color=never -Pzo '(?s)Populating kdc.*Done.' ; then
          success=1
          break;
        fi
        count=$(( $count + 1 ));
      done
      if [ $success -ne 1 ]; then
        >&2 echo FAILED
      fi
    register: wait_keytab
    until: wait_keytab is success
    retries: 5
    delay: 3
    changed_when: false
    failed_when: "'FAILED' in wait_keytab.stderr"
    loop: "{{ container_infos }}"

  - name: Copy keytab files
    shell: |
      if ! {{ item[0].is_initialized|string|lower }} || [ ! -e /etc/eos-docker/{{ item[0].name }}/{{ item[1] }}.keytab ] ; then
        docker cp {{ item[0].name }}:/root/{{ item[1] }}.keytab /etc/eos-docker/{{ item[0].name }}/{{ item[1] }}.keytab &&
        echo changed;
      else
        echo skipped;
      fi
    args:
      executable: /bin/bash
    register: copy_command_result
    changed_when: copy_command_result.stdout_lines|length > 0 and copy_command_result.stdout_lines[-1] == 'changed'
    loop: "{{ container_infos|product( ['host']|product(eos_mgm_nodes)|map('join', '.')|list + [ 'user.'+eos_admin_user, 'eos' ] )|list }}"

  - name: Create keytab files directory
    become: no
    file:
      path: "{{ playbook_dir }}/tmp/keytab/{{ item[0].krb_realm }}/{{ item[1] }}/"
      state: directory
      mode: u=rwX,g=rX,o=rX
      recurse: yes
    loop: "{{ container_infos|product(eos_nodes)|list }}"
    delegate_to: 127.0.0.1

  - name: Fetch mgm server keytab files
    fetch:
      src: "/etc/eos-docker/{{ item[0].name }}/host.{{ item[1] }}.keytab"
      dest: "tmp/keytab/{{ item[0].krb_realm }}/{{ item[1] }}/eos.krb5.keytab"
      flat: yes
    loop: "{{ container_infos|product(eos_mgm_nodes)|list }}"

  - name: Fetch user keytab files
    fetch:
      src: "/etc/eos-docker/{{ item[0].name }}/user.{{ eos_admin_user }}.keytab"
      dest: "tmp/keytab/{{ item[0].krb_realm }}/{{ item[1] }}/{{ eos_admin_user }}.keytab"
      flat: yes
    loop: "{{ container_infos|product(eos_manager_nodes)|list }}"

  - name: Fetch eos keytab files
    fetch:
      src: "/etc/eos-docker/{{ item[0].name }}/eos.keytab"
      dest: "tmp/keytab/{{ item[0].krb_realm }}/{{ item[1] }}/eos.keytab"
      flat: yes
    loop: "{{ container_infos|product(eos_nodes)|list }}"

  when: containers is defined and containers.eos_krb is defined
