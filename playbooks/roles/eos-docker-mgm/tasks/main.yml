---
- block:
  - set_fact:
      shiped_files: []
      template_files:
      - { container_path: "/etc/sysconfig/eos", host_dir: "./sysconfig", host_file: "eos", template_file: "eos.sysconfig.j2", owner: "root", group: "root", mode: "0644" }
      - { container_path: "/etc/xrd.cf.mgm", host_dir: ".", host_file: "xrd.cf.mgm", template_file: "xrd.cf.mgm.j2", owner: "root", group: "root", mode: "0644" }
      - { container_path: "/etc/krb5.conf", host_dir: ".", host_file: "krb5.conf", template_file: "krb5.conf.j2", owner: "root", group: "root", mode: "0644" }
      - { container_path: "/eos_mgm_fs_setup.sh", host_dir: ".", host_file: "eos_mgm_fs_setup.sh", template_file: "eos_mgm_fs_setup.sh.j2", owner: "root", group: "root", mode: "0755" }
      - { container_path: "/eos_mgm_setup.sh", host_dir: ".", host_file: "eos_mgm_setup.sh", template_file: "eos_mgm_setup.sh.j2", owner: "root", group: "root", mode: "0755" }
      persistent_volumes:
      - { name: "roothome", dest: "/root" }
      - { name: "userhome", dest: "/home" }
      - { name: "eos", dest: "/var/eos" }
      - { name: "log", dest: "/var/log/eos" }
      eos_componets: "{{ containers.eos_mgm }}"

  - name: Set empty initialization informaions variable
    set_fact:
      initialization_infos: []
      need_shiped_files: {}

  - name: Init need_shiped_files flag
    set_fact:
      need_shiped_files: "{{ need_shiped_files | combine({ item.name: 'False'|bool }) }}"
    loop: "{{ eos_componets }}"

  - name: Check initialized holder
    stat: path=/etc/eos-docker/{{ eos_componet.name }}/INITIALIZED
    register: initialized_holder_stats
    loop: "{{ eos_componets }}"
    loop_control:
      loop_var: eos_componet

  - name: Build initialization informaions of each container
    set_fact:
      initialization_infos: "{{ initialization_infos + [ { 'eos_componet': item.eos_componet, 'is_initialized': item.stat.exists } ] }}"
    loop: "{{ initialized_holder_stats.results }}"

  - name: Create shiped and template file directory
    file:
      path: "/etc/eos-docker/{{ item[0].eos_componet.name }}/{{ item[1].host_dir }}/"
      state: directory
      mode: u=rwX,g=rX,o=rX
      recurse: yes
    when: not item[0].is_initialized
    loop: "{{ initialization_infos|product(shiped_files + template_files)|list }}"

  - name: Check shiped files
    stat: path=/etc/eos-docker/{{ item[0].eos_componet.name }}/{{ item[1].host_dir }}/{{ item[1].host_file }}
    register: shiped_files_stats
    loop: "{{ initialization_infos|product(shiped_files)|list }}"

  - name: Build need_shiped_files
    set_fact:
      need_shiped_files: "{{ need_shiped_files | combine({ item.item[0].eos_componet.name: 'True'|bool }) }}"
    when: not item.stat.exists
    loop: "{{ shiped_files_stats.results }}"

  - name: Start container for shiped files
    docker_container:
      name: "{{ item.eos_componet.name }}"
      image: "{{ item.eos_componet.image }}"
      state: started
      recreate: yes
      interactive: yes
      tty: yes
      hostname: "{{ item.eos_componet.name }}.{{ item.eos_componet.domain }}"
    when: not item.is_initialized or need_shiped_files[item.eos_componet.name]
    loop: "{{ initialization_infos }}"

  - name: Copy default shiped files
    shell: if ! {{ item[0].is_initialized|string|lower }} ||  [ ! -e /etc/eos-docker/{{ item[0].eos_componet.name }}/{{ item[1].host_dir }}/{{ item[1].host_file }} ] ; then docker cp {{ item[0].eos_componet.name }}:{{ item[1].container_path }} /etc/eos-docker/{{ item[0].eos_componet.name }}/{{ item[1].host_dir }}/{{ item[1].host_file }} && echo changed; else echo skipped; fi
    args:
      executable: /bin/bash
    register: copy_command_result
    changed_when: copy_command_result.stdout_lines|length > 0 and copy_command_result.stdout_lines[-1] == 'changed'
    loop: "{{ initialization_infos|product(shiped_files)|list }}"

  - name: Stop container for shiped files
    docker_container:
      name: "{{ item.eos_componet.name }}"
      state: absent
    when: not item.is_initialized or need_shiped_files[item.eos_componet.name]
    loop: "{{ initialization_infos }}"

  - name: Create template files
    template: src={{ item[1].template_file }} dest=/etc/eos-docker/{{ item[0].eos_componet.name }}/{{ item[1].host_dir }}/{{ item[1].host_file }} owner={{ item[1].owner }} group={{ item[1].group }} mode={{ item[1].mode }} force={{ not item[0].is_initialized }}
    loop: "{{ initialization_infos|product(template_files)|list }}"

  - name: Create initialized holder
    file:
      path: /etc/eos-docker/{{ item.eos_componet.name }}/INITIALIZED
      state: touch
    when: not item.is_initialized
    loop: "{{ initialization_infos }}"

  - name: Create a local volume
    docker_volume:
      name: "{{ item[0].name }}_{{ item[1].name }}"
    loop: "{{ eos_componets|product(persistent_volumes)|list }}"

  - name: Create a nfs volume
    docker_volume:
      name: "{{ item[0].name }}_{{ item[1].name }}"
      driver_options:
        type: nfs
        device: "{{ item[1].device }}"
        o: "{{ item[1].options }}"
    loop: "{{ eos_componets|default([{}])|subelements('nfs_volumes', skip_missing=True) }}"

  - name: Set empty container_volumes variable
    set_fact:
      container_volumes: {}

  - name: Build empty volume list of each container
    set_fact:
      container_volumes: "{{ container_volumes | combine( { item.name: [] } ) }}"
    loop: "{{ eos_componets }}"

  - name: Build container volume list with shiped_files and template_files
    set_fact:
      container_volumes: "{{ container_volumes | combine({ item[0].name: container_volumes[item[0].name] + [ '/etc/eos-docker/' + item[0].name + '/' + item[1].host_dir + '/' + item[1].host_file + ':' + item[1].container_path ] }) }}"
    loop: "{{ eos_componets|product(shiped_files+template_files)|list }}"

  - name: Build container volume list with persistent_volumes
    set_fact:
      container_volumes: "{{ container_volumes | combine({ item[0].name: container_volumes[item[0].name] + [ item[0].name + '_' + item[1].name + ':' + item[1].dest ] }) }}"
    loop: "{{ eos_componets|product(persistent_volumes)|list }}"

  - name: Build container volume list with nfs_volumes
    set_fact:
      container_volumes: "{{ container_volumes | combine({ item[0].name: container_volumes[item[0].name] + [ item[0].name + '_' + item[1].name + ':' + item[1].dest ] }) }}"
    loop: "{{ eos_componets|default([{}])|subelements('nfs_volumes', skip_missing=True) }}"

  - name: Copy host keytab
    copy:
      src: "{{ playbook_dir }}/tmp/{{ eos_krb_server }}_{{ item.name }}.{{ item.domain }}.keytab"
      dest: "/etc/eos-docker/{{ item.name }}/eos.krb5.keytab"
    loop: "{{ eos_componets }}"

  - name: Start container
    docker_container:
      name: "{{ item.name }}"
      image: "{{ item.image }}"
      state: started
      interactive: yes
      tty: yes
      privileged: yes
      hostname: "{{ item.name }}.{{ item.domain }}"
      purge_networks: yes
      networks:
      - name: "{{ item.network }}"
        ipv4_address: "{{ item.ipv4_address }}"
        aliases: "{{ [ item.name ] + item.network_aliases|default([]) }}"
      volumes: "{{ container_volumes[item.name] + [ '/etc/eos-docker/'+item.name+'/eos.krb5.keytab:/etc/eos.krb5.keytab' ] }}"
      etc_hosts: "{{ item.etc_hosts }}"
    register: container_start_results
    loop: "{{ eos_componets }}"

  - name: Start service
    shell: docker exec -i {{ item.item.name }} /eos_mgm_setup.sh
    when: item.changed
    loop: "{{ container_start_results.results }}"

  when: containers is defined and containers.eos_mgm is defined
